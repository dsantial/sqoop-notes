线程的创建和启用：

java使用Thread类代表线程，所有的线程对象都必须是Thread或者其子类的实例，每个线程的作用是完成一定任务，实际上是就是执行一段程序流（一段顺序执行的代码）
继承Thread类创建线类
1：定义Thread类的子类 并重写该类的Run方法 该run方法的方法体就代表了线程需要完成的任务
2：创建Thread类的实例，即创建了线程对象
3：调用线程的start方法来启动线程

使用Runnable接口创建线程类
1：定义Runnable接口的实现类，并重写它的Run方法，run方法同样是该线程的执行体！
2：创建Runnable实现类的实例，并将此实例作为Thread的target创建一个Thread对象，该Thread对象才是真正的线程对象！
3：调用start方法启动该线程

采用Ruunable接口的方式创建多个线程可以共享线程类的实例变量，这是因为在这种方式下，程序创建的Runnable对象只是线程的target，
而多个线程可以共享一个target，所以多个线程可以共享一个实例变量！

启动线程要调用start方法，而不是run方法，永远不要调用线程的run方法，
如果调用run方法，系统会把线程对象当作普通的对象，会把线程的执行体当作普通方法来调用！

当主线程结束时，其它线程不受任何影响，并不会随之结束。一旦子线程启动起来后，他就会拥有和主线程相同的地位，它不会受主线程影响。

为了测试某个线程是否死亡，可以调用该线程的isAlive方法，当线程处于就绪，运行，阻塞三种状态时，将返回true；当线程处于新建，死亡两种状态时返回为false。

不要试图对一个已经死亡的线程调用start方法让它重新启动，死亡后的线程无法作为线程使用。
